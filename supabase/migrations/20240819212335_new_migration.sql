create extension if not exists "pg_jsonschema" with schema "extensions";


create table "public"."chat_sessions" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "user1" uuid default gen_random_uuid(),
    "user2" uuid default gen_random_uuid(),
    "recent_message" text,
    "updated_at" timestamp with time zone,
    "user1_read" boolean not null default false,
    "user2_read" boolean not null default false
);


alter table "public"."chat_sessions" enable row level security;

create table "public"."communities" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "community_title" text,
    "community_style" text,
    "community_owner" uuid,
    "channels" uuid[],
    "community_photos" text[],
    "community_members" uuid[],
    "community_profile_pic" text,
    "about" text,
    "city" text not null default 'Halifax'::text,
    "address" text,
    "phone_number" text,
    "member_count" numeric not null default '1'::numeric,
    "public_community" boolean not null default false
);


alter table "public"."communities" enable row level security;

create table "public"."community_channel_membership" (
    "user_id" uuid not null default gen_random_uuid(),
    "channel_id" uuid not null default gen_random_uuid(),
    "muted" boolean default false,
    "expo_push_token" text,
    "community_id" bigint not null
);


alter table "public"."community_channel_membership" enable row level security;

create table "public"."community_channel_messages" (
    "id" uuid not null default gen_random_uuid(),
    "sent_at" timestamp with time zone not null default now(),
    "message" text default ''::text,
    "sender_id" uuid default gen_random_uuid(),
    "channel_id" uuid default gen_random_uuid(),
    "sender_name" text,
    "image" text,
    "sender_profile_pic" text,
    "eventId" bigint,
    "community_id" bigint,
    "community_or_event_link" boolean not null default false
);


alter table "public"."community_channel_messages" enable row level security;

create table "public"."community_channels" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "channel_type" text not null default 'Text'::text,
    "channel_title" text not null default 'General'::text,
    "community" bigint not null,
    "community_owner" uuid,
    "channel_pic" text,
    "recent_message" text,
    "updated_at" timestamp with time zone,
    "private" boolean not null default false,
    "recent_message_sender" text,
    "community_name" text not null default 'Community'::text
);


alter table "public"."community_channels" enable row level security;

create table "public"."community_members" (
    "user_id" uuid not null default auth.uid(),
    "joined_at" timestamp with time zone not null default now(),
    "community_id" bigint not null,
    "role" text not null default 'Member'::text,
    "community_owner" uuid,
    "expo_push_token" text
);


alter table "public"."community_members" enable row level security;

create table "public"."community_requests" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "requested_community" bigint,
    "user_id" uuid,
    "first_name" text,
    "expo_push_token" text
);


alter table "public"."community_requests" enable row level security;

create table "public"."connection_requests" (
    "requester" uuid not null default gen_random_uuid(),
    "requested" uuid not null default gen_random_uuid(),
    "request_sent" timestamp with time zone default now(),
    "message" text not null default 'Hello'::text
);


alter table "public"."connection_requests" enable row level security;

create table "public"."events" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "date" timestamp with time zone,
    "event_title" text,
    "event_description" text,
    "price" numeric,
    "community_host" bigint,
    "event_host" uuid not null,
    "event_photos" text[],
    "event_cover_photo" text,
    "community_host_name" text,
    "location" text,
    "event_style" text,
    "event_limit" numeric default '20'::numeric,
    "public_event" boolean not null default true
);


alter table "public"."events" enable row level security;

create table "public"."events_users" (
    "user_id" uuid not null,
    "event_id" integer not null,
    "first_name" text,
    "last_name" text
);


alter table "public"."events_users" enable row level security;

create table "public"."messages" (
    "id" uuid not null default gen_random_uuid(),
    "sent_at" timestamp with time zone not null default now(),
    "message" text default ''::text,
    "chat_session" uuid not null,
    "sender" uuid,
    "read" boolean not null default false,
    "community_or_event_link" boolean not null default false,
    "eventId" bigint,
    "community_id" bigint,
    "image" text,
    "sender_profile_pic" text,
    "sender_name" text
);


alter table "public"."messages" enable row level security;

create table "public"."news_posts" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "title" text default 'Title'::text,
    "content" text not null default 'No Content'::text,
    "author" uuid not null,
    "community_id" bigint not null,
    "author_name" text not null default ''::text
);


alter table "public"."news_posts" enable row level security;

create table "public"."notifications" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default gen_random_uuid(),
    "title" text not null,
    "description" text not null,
    "is_read" boolean not null,
    "notification_type" text not null default ''::text,
    "data" jsonb,
    "image" text
);


alter table "public"."notifications" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "created_at" timestamp without time zone default CURRENT_TIMESTAMP,
    "username" text,
    "first_name" text,
    "last_name" text,
    "gender" text,
    "intentions" text,
    "activities" text[],
    "birthday" timestamp without time zone,
    "photos_url" text[],
    "community_created" bigint,
    "onboard" boolean not null default false,
    "ignored_users" uuid[],
    "sexuality" text,
    "community_preference" text[],
    "actvitiy_time" text,
    "pinned_channels" uuid[],
    "profile_pic" text,
    "bucket_list" text,
    "city" text not null default 'Halifax'::text,
    "fitness_goals" text[],
    "fitness_lvl" text,
    "fitness_records" text[],
    "hobbies" text,
    "music_pref" text,
    "primary_gym" bigint,
    "secondary_gym" bigint,
    "expo_push_token" text,
    "allowed_create_community" boolean not null default false,
    "about" text,
    "new_update_modal" boolean not null default false
);


alter table "public"."profiles" enable row level security;

create table "public"."user_tokens" (
    "id" uuid not null default auth.uid(),
    "user_token" text not null
);


alter table "public"."user_tokens" enable row level security;

CREATE UNIQUE INDEX chat_sessions_pkey ON public.chat_sessions USING btree (id);

CREATE UNIQUE INDEX community_channel_membership_pkey ON public.community_channel_membership USING btree (community_id, user_id, channel_id);

CREATE UNIQUE INDEX community_channel_messages_pkey ON public.community_channel_messages USING btree (id);

CREATE UNIQUE INDEX community_channels_pkey ON public.community_channels USING btree (id);

CREATE UNIQUE INDEX community_members_pkey ON public.community_members USING btree (user_id, community_id);

CREATE UNIQUE INDEX community_requests_pkey ON public.community_requests USING btree (id);

CREATE UNIQUE INDEX connection_requests_pkey ON public.connection_requests USING btree (requester, requested);

CREATE UNIQUE INDEX events_pkey ON public.events USING btree (id);

CREATE UNIQUE INDEX events_users_pkey ON public.events_users USING btree (user_id, event_id);

CREATE UNIQUE INDEX gyms_pkey ON public.communities USING btree (id);

CREATE UNIQUE INDEX messages_pkey ON public.messages USING btree (id);

CREATE UNIQUE INDEX news_posts_pkey ON public.news_posts USING btree (id);

CREATE UNIQUE INDEX notifications_pkey ON public.notifications USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (username);

CREATE UNIQUE INDEX user_tokens_pkey ON public.user_tokens USING btree (id);

alter table "public"."chat_sessions" add constraint "chat_sessions_pkey" PRIMARY KEY using index "chat_sessions_pkey";

alter table "public"."communities" add constraint "gyms_pkey" PRIMARY KEY using index "gyms_pkey";

alter table "public"."community_channel_membership" add constraint "community_channel_membership_pkey" PRIMARY KEY using index "community_channel_membership_pkey";

alter table "public"."community_channel_messages" add constraint "community_channel_messages_pkey" PRIMARY KEY using index "community_channel_messages_pkey";

alter table "public"."community_channels" add constraint "community_channels_pkey" PRIMARY KEY using index "community_channels_pkey";

alter table "public"."community_members" add constraint "community_members_pkey" PRIMARY KEY using index "community_members_pkey";

alter table "public"."community_requests" add constraint "community_requests_pkey" PRIMARY KEY using index "community_requests_pkey";

alter table "public"."connection_requests" add constraint "connection_requests_pkey" PRIMARY KEY using index "connection_requests_pkey";

alter table "public"."events" add constraint "events_pkey" PRIMARY KEY using index "events_pkey";

alter table "public"."events_users" add constraint "events_users_pkey" PRIMARY KEY using index "events_users_pkey";

alter table "public"."messages" add constraint "messages_pkey" PRIMARY KEY using index "messages_pkey";

alter table "public"."news_posts" add constraint "news_posts_pkey" PRIMARY KEY using index "news_posts_pkey";

alter table "public"."notifications" add constraint "notifications_pkey" PRIMARY KEY using index "notifications_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."user_tokens" add constraint "user_tokens_pkey" PRIMARY KEY using index "user_tokens_pkey";

alter table "public"."chat_sessions" add constraint "chat_sessions_user1_fkey" FOREIGN KEY (user1) REFERENCES profiles(id) not valid;

alter table "public"."chat_sessions" validate constraint "chat_sessions_user1_fkey";

alter table "public"."chat_sessions" add constraint "chat_sessions_user2_fkey1" FOREIGN KEY (user2) REFERENCES profiles(id) not valid;

alter table "public"."chat_sessions" validate constraint "chat_sessions_user2_fkey1";

alter table "public"."communities" add constraint "public_communities_community_owner_fkey" FOREIGN KEY (community_owner) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."communities" validate constraint "public_communities_community_owner_fkey";

alter table "public"."community_channel_membership" add constraint "public_community_channel_membership_channel_id_fkey" FOREIGN KEY (channel_id) REFERENCES community_channels(id) ON DELETE CASCADE not valid;

alter table "public"."community_channel_membership" validate constraint "public_community_channel_membership_channel_id_fkey";

alter table "public"."community_channel_membership" add constraint "public_community_channel_membership_community_id_fkey" FOREIGN KEY (community_id) REFERENCES communities(id) ON DELETE CASCADE not valid;

alter table "public"."community_channel_membership" validate constraint "public_community_channel_membership_community_id_fkey";

alter table "public"."community_channel_membership" add constraint "public_community_channel_membership_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."community_channel_membership" validate constraint "public_community_channel_membership_user_id_fkey";

alter table "public"."community_channel_messages" add constraint "public_community_channel_messages_channel_id_fkey" FOREIGN KEY (channel_id) REFERENCES community_channels(id) ON DELETE CASCADE not valid;

alter table "public"."community_channel_messages" validate constraint "public_community_channel_messages_channel_id_fkey";

alter table "public"."community_channel_messages" add constraint "public_community_channel_messages_community_id_fkey" FOREIGN KEY (community_id) REFERENCES communities(id) ON DELETE CASCADE not valid;

alter table "public"."community_channel_messages" validate constraint "public_community_channel_messages_community_id_fkey";

alter table "public"."community_channel_messages" add constraint "public_community_channel_messages_eventId_fkey" FOREIGN KEY ("eventId") REFERENCES events(id) ON DELETE CASCADE not valid;

alter table "public"."community_channel_messages" validate constraint "public_community_channel_messages_eventId_fkey";

alter table "public"."community_channel_messages" add constraint "public_community_channel_messages_sender_id_fkey" FOREIGN KEY (sender_id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."community_channel_messages" validate constraint "public_community_channel_messages_sender_id_fkey";

alter table "public"."community_channels" add constraint "community_channels_community_fkey" FOREIGN KEY (community) REFERENCES communities(id) ON DELETE CASCADE not valid;

alter table "public"."community_channels" validate constraint "community_channels_community_fkey";

alter table "public"."community_channels" add constraint "community_channels_community_owner_fkey" FOREIGN KEY (community_owner) REFERENCES profiles(id) not valid;

alter table "public"."community_channels" validate constraint "community_channels_community_owner_fkey";

alter table "public"."community_members" add constraint "public_community_members_community_id_fkey" FOREIGN KEY (community_id) REFERENCES communities(id) ON DELETE CASCADE not valid;

alter table "public"."community_members" validate constraint "public_community_members_community_id_fkey";

alter table "public"."community_members" add constraint "public_community_members_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."community_members" validate constraint "public_community_members_user_id_fkey";

alter table "public"."community_requests" add constraint "community_requests_requested_community_fkey" FOREIGN KEY (requested_community) REFERENCES communities(id) ON DELETE CASCADE not valid;

alter table "public"."community_requests" validate constraint "community_requests_requested_community_fkey";

alter table "public"."community_requests" add constraint "community_requests_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."community_requests" validate constraint "community_requests_user_id_fkey";

alter table "public"."connection_requests" add constraint "public_connection_requests_requested_fkey" FOREIGN KEY (requested) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."connection_requests" validate constraint "public_connection_requests_requested_fkey";

alter table "public"."connection_requests" add constraint "public_connection_requests_requester_fkey" FOREIGN KEY (requester) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."connection_requests" validate constraint "public_connection_requests_requester_fkey";

alter table "public"."events" add constraint "public_events_community_host_fkey" FOREIGN KEY (community_host) REFERENCES communities(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."events" validate constraint "public_events_community_host_fkey";

alter table "public"."events" add constraint "public_events_event_host_fkey" FOREIGN KEY (event_host) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."events" validate constraint "public_events_event_host_fkey";

alter table "public"."events_users" add constraint "public_events_users_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."events_users" validate constraint "public_events_users_event_id_fkey";

alter table "public"."events_users" add constraint "public_events_users_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."events_users" validate constraint "public_events_users_user_id_fkey";

alter table "public"."messages" add constraint "messages_chat session_fkey" FOREIGN KEY (chat_session) REFERENCES chat_sessions(id) ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "messages_chat session_fkey";

alter table "public"."messages" add constraint "messages_sender_fkey" FOREIGN KEY (sender) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "messages_sender_fkey";

alter table "public"."messages" add constraint "public_messages_community_id_fkey" FOREIGN KEY (community_id) REFERENCES communities(id) ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "public_messages_community_id_fkey";

alter table "public"."messages" add constraint "public_messages_eventId_fkey" FOREIGN KEY ("eventId") REFERENCES events(id) ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "public_messages_eventId_fkey";

alter table "public"."news_posts" add constraint "public_news_posts_author_fkey" FOREIGN KEY (author) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."news_posts" validate constraint "public_news_posts_author_fkey";

alter table "public"."news_posts" add constraint "public_news_posts_community_id_fkey" FOREIGN KEY (community_id) REFERENCES communities(id) ON DELETE CASCADE not valid;

alter table "public"."news_posts" validate constraint "public_news_posts_community_id_fkey";

alter table "public"."notifications" add constraint "public_notifications_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."notifications" validate constraint "public_notifications_user_id_fkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."profiles" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."profiles" add constraint "public_profiles_community_created_fkey" FOREIGN KEY (community_created) REFERENCES communities(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "public_profiles_community_created_fkey";

alter table "public"."profiles" add constraint "public_profiles_primary_gym_fkey" FOREIGN KEY (primary_gym) REFERENCES communities(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."profiles" validate constraint "public_profiles_primary_gym_fkey";

alter table "public"."profiles" add constraint "public_profiles_secondary_gym_fkey" FOREIGN KEY (secondary_gym) REFERENCES communities(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."profiles" validate constraint "public_profiles_secondary_gym_fkey";

alter table "public"."profiles" add constraint "username_length" CHECK (((char_length(username) >= 3) AND (char_length(username) <= 12))) not valid;

alter table "public"."profiles" validate constraint "username_length";

alter table "public"."user_tokens" add constraint "public_user_tokens_id_fkey" FOREIGN KEY (id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_tokens" validate constraint "public_user_tokens_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.firstname_lastname(profiles)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$
  select $1.first_name|| ' ' || $1.last_name;
$function$
;

CREATE OR REPLACE FUNCTION public.get_profiles_with_min_urls(user_id uuid)
 RETURNS SETOF profiles
 LANGUAGE plpgsql
AS $function$
BEGIN
  RETURN QUERY
  SELECT *
  FROM profiles
  WHERE id != user_id
    AND array_length(photos_url, 1) >= 2;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  insert into public.profiles (id, first_name, last_name, photos_url)
  values (new.id, new.raw_user_meta_data->>'first_name', new.raw_user_meta_data->>'last_name', ARRAY[new.raw_user_meta_data->>'photos_url']::text[]);
  return new;
end;$function$
;

grant delete on table "public"."chat_sessions" to "anon";

grant insert on table "public"."chat_sessions" to "anon";

grant references on table "public"."chat_sessions" to "anon";

grant select on table "public"."chat_sessions" to "anon";

grant trigger on table "public"."chat_sessions" to "anon";

grant truncate on table "public"."chat_sessions" to "anon";

grant update on table "public"."chat_sessions" to "anon";

grant delete on table "public"."chat_sessions" to "authenticated";

grant insert on table "public"."chat_sessions" to "authenticated";

grant references on table "public"."chat_sessions" to "authenticated";

grant select on table "public"."chat_sessions" to "authenticated";

grant trigger on table "public"."chat_sessions" to "authenticated";

grant truncate on table "public"."chat_sessions" to "authenticated";

grant update on table "public"."chat_sessions" to "authenticated";

grant delete on table "public"."chat_sessions" to "service_role";

grant insert on table "public"."chat_sessions" to "service_role";

grant references on table "public"."chat_sessions" to "service_role";

grant select on table "public"."chat_sessions" to "service_role";

grant trigger on table "public"."chat_sessions" to "service_role";

grant truncate on table "public"."chat_sessions" to "service_role";

grant update on table "public"."chat_sessions" to "service_role";

grant delete on table "public"."communities" to "anon";

grant insert on table "public"."communities" to "anon";

grant references on table "public"."communities" to "anon";

grant select on table "public"."communities" to "anon";

grant trigger on table "public"."communities" to "anon";

grant truncate on table "public"."communities" to "anon";

grant update on table "public"."communities" to "anon";

grant delete on table "public"."communities" to "authenticated";

grant insert on table "public"."communities" to "authenticated";

grant references on table "public"."communities" to "authenticated";

grant select on table "public"."communities" to "authenticated";

grant trigger on table "public"."communities" to "authenticated";

grant truncate on table "public"."communities" to "authenticated";

grant update on table "public"."communities" to "authenticated";

grant delete on table "public"."communities" to "service_role";

grant insert on table "public"."communities" to "service_role";

grant references on table "public"."communities" to "service_role";

grant select on table "public"."communities" to "service_role";

grant trigger on table "public"."communities" to "service_role";

grant truncate on table "public"."communities" to "service_role";

grant update on table "public"."communities" to "service_role";

grant delete on table "public"."community_channel_membership" to "anon";

grant insert on table "public"."community_channel_membership" to "anon";

grant references on table "public"."community_channel_membership" to "anon";

grant select on table "public"."community_channel_membership" to "anon";

grant trigger on table "public"."community_channel_membership" to "anon";

grant truncate on table "public"."community_channel_membership" to "anon";

grant update on table "public"."community_channel_membership" to "anon";

grant delete on table "public"."community_channel_membership" to "authenticated";

grant insert on table "public"."community_channel_membership" to "authenticated";

grant references on table "public"."community_channel_membership" to "authenticated";

grant select on table "public"."community_channel_membership" to "authenticated";

grant trigger on table "public"."community_channel_membership" to "authenticated";

grant truncate on table "public"."community_channel_membership" to "authenticated";

grant update on table "public"."community_channel_membership" to "authenticated";

grant delete on table "public"."community_channel_membership" to "service_role";

grant insert on table "public"."community_channel_membership" to "service_role";

grant references on table "public"."community_channel_membership" to "service_role";

grant select on table "public"."community_channel_membership" to "service_role";

grant trigger on table "public"."community_channel_membership" to "service_role";

grant truncate on table "public"."community_channel_membership" to "service_role";

grant update on table "public"."community_channel_membership" to "service_role";

grant delete on table "public"."community_channel_messages" to "anon";

grant insert on table "public"."community_channel_messages" to "anon";

grant references on table "public"."community_channel_messages" to "anon";

grant select on table "public"."community_channel_messages" to "anon";

grant trigger on table "public"."community_channel_messages" to "anon";

grant truncate on table "public"."community_channel_messages" to "anon";

grant update on table "public"."community_channel_messages" to "anon";

grant delete on table "public"."community_channel_messages" to "authenticated";

grant insert on table "public"."community_channel_messages" to "authenticated";

grant references on table "public"."community_channel_messages" to "authenticated";

grant select on table "public"."community_channel_messages" to "authenticated";

grant trigger on table "public"."community_channel_messages" to "authenticated";

grant truncate on table "public"."community_channel_messages" to "authenticated";

grant update on table "public"."community_channel_messages" to "authenticated";

grant delete on table "public"."community_channel_messages" to "service_role";

grant insert on table "public"."community_channel_messages" to "service_role";

grant references on table "public"."community_channel_messages" to "service_role";

grant select on table "public"."community_channel_messages" to "service_role";

grant trigger on table "public"."community_channel_messages" to "service_role";

grant truncate on table "public"."community_channel_messages" to "service_role";

grant update on table "public"."community_channel_messages" to "service_role";

grant delete on table "public"."community_channels" to "anon";

grant insert on table "public"."community_channels" to "anon";

grant references on table "public"."community_channels" to "anon";

grant select on table "public"."community_channels" to "anon";

grant trigger on table "public"."community_channels" to "anon";

grant truncate on table "public"."community_channels" to "anon";

grant update on table "public"."community_channels" to "anon";

grant delete on table "public"."community_channels" to "authenticated";

grant insert on table "public"."community_channels" to "authenticated";

grant references on table "public"."community_channels" to "authenticated";

grant select on table "public"."community_channels" to "authenticated";

grant trigger on table "public"."community_channels" to "authenticated";

grant truncate on table "public"."community_channels" to "authenticated";

grant update on table "public"."community_channels" to "authenticated";

grant delete on table "public"."community_channels" to "service_role";

grant insert on table "public"."community_channels" to "service_role";

grant references on table "public"."community_channels" to "service_role";

grant select on table "public"."community_channels" to "service_role";

grant trigger on table "public"."community_channels" to "service_role";

grant truncate on table "public"."community_channels" to "service_role";

grant update on table "public"."community_channels" to "service_role";

grant delete on table "public"."community_members" to "anon";

grant insert on table "public"."community_members" to "anon";

grant references on table "public"."community_members" to "anon";

grant select on table "public"."community_members" to "anon";

grant trigger on table "public"."community_members" to "anon";

grant truncate on table "public"."community_members" to "anon";

grant update on table "public"."community_members" to "anon";

grant delete on table "public"."community_members" to "authenticated";

grant insert on table "public"."community_members" to "authenticated";

grant references on table "public"."community_members" to "authenticated";

grant select on table "public"."community_members" to "authenticated";

grant trigger on table "public"."community_members" to "authenticated";

grant truncate on table "public"."community_members" to "authenticated";

grant update on table "public"."community_members" to "authenticated";

grant delete on table "public"."community_members" to "service_role";

grant insert on table "public"."community_members" to "service_role";

grant references on table "public"."community_members" to "service_role";

grant select on table "public"."community_members" to "service_role";

grant trigger on table "public"."community_members" to "service_role";

grant truncate on table "public"."community_members" to "service_role";

grant update on table "public"."community_members" to "service_role";

grant delete on table "public"."community_requests" to "anon";

grant insert on table "public"."community_requests" to "anon";

grant references on table "public"."community_requests" to "anon";

grant select on table "public"."community_requests" to "anon";

grant trigger on table "public"."community_requests" to "anon";

grant truncate on table "public"."community_requests" to "anon";

grant update on table "public"."community_requests" to "anon";

grant delete on table "public"."community_requests" to "authenticated";

grant insert on table "public"."community_requests" to "authenticated";

grant references on table "public"."community_requests" to "authenticated";

grant select on table "public"."community_requests" to "authenticated";

grant trigger on table "public"."community_requests" to "authenticated";

grant truncate on table "public"."community_requests" to "authenticated";

grant update on table "public"."community_requests" to "authenticated";

grant delete on table "public"."community_requests" to "service_role";

grant insert on table "public"."community_requests" to "service_role";

grant references on table "public"."community_requests" to "service_role";

grant select on table "public"."community_requests" to "service_role";

grant trigger on table "public"."community_requests" to "service_role";

grant truncate on table "public"."community_requests" to "service_role";

grant update on table "public"."community_requests" to "service_role";

grant delete on table "public"."connection_requests" to "anon";

grant insert on table "public"."connection_requests" to "anon";

grant references on table "public"."connection_requests" to "anon";

grant select on table "public"."connection_requests" to "anon";

grant trigger on table "public"."connection_requests" to "anon";

grant truncate on table "public"."connection_requests" to "anon";

grant update on table "public"."connection_requests" to "anon";

grant delete on table "public"."connection_requests" to "authenticated";

grant insert on table "public"."connection_requests" to "authenticated";

grant references on table "public"."connection_requests" to "authenticated";

grant select on table "public"."connection_requests" to "authenticated";

grant trigger on table "public"."connection_requests" to "authenticated";

grant truncate on table "public"."connection_requests" to "authenticated";

grant update on table "public"."connection_requests" to "authenticated";

grant delete on table "public"."connection_requests" to "service_role";

grant insert on table "public"."connection_requests" to "service_role";

grant references on table "public"."connection_requests" to "service_role";

grant select on table "public"."connection_requests" to "service_role";

grant trigger on table "public"."connection_requests" to "service_role";

grant truncate on table "public"."connection_requests" to "service_role";

grant update on table "public"."connection_requests" to "service_role";

grant delete on table "public"."events" to "anon";

grant insert on table "public"."events" to "anon";

grant references on table "public"."events" to "anon";

grant select on table "public"."events" to "anon";

grant trigger on table "public"."events" to "anon";

grant truncate on table "public"."events" to "anon";

grant update on table "public"."events" to "anon";

grant delete on table "public"."events" to "authenticated";

grant insert on table "public"."events" to "authenticated";

grant references on table "public"."events" to "authenticated";

grant select on table "public"."events" to "authenticated";

grant trigger on table "public"."events" to "authenticated";

grant truncate on table "public"."events" to "authenticated";

grant update on table "public"."events" to "authenticated";

grant delete on table "public"."events" to "service_role";

grant insert on table "public"."events" to "service_role";

grant references on table "public"."events" to "service_role";

grant select on table "public"."events" to "service_role";

grant trigger on table "public"."events" to "service_role";

grant truncate on table "public"."events" to "service_role";

grant update on table "public"."events" to "service_role";

grant delete on table "public"."events_users" to "anon";

grant insert on table "public"."events_users" to "anon";

grant references on table "public"."events_users" to "anon";

grant select on table "public"."events_users" to "anon";

grant trigger on table "public"."events_users" to "anon";

grant truncate on table "public"."events_users" to "anon";

grant update on table "public"."events_users" to "anon";

grant delete on table "public"."events_users" to "authenticated";

grant insert on table "public"."events_users" to "authenticated";

grant references on table "public"."events_users" to "authenticated";

grant select on table "public"."events_users" to "authenticated";

grant trigger on table "public"."events_users" to "authenticated";

grant truncate on table "public"."events_users" to "authenticated";

grant update on table "public"."events_users" to "authenticated";

grant delete on table "public"."events_users" to "service_role";

grant insert on table "public"."events_users" to "service_role";

grant references on table "public"."events_users" to "service_role";

grant select on table "public"."events_users" to "service_role";

grant trigger on table "public"."events_users" to "service_role";

grant truncate on table "public"."events_users" to "service_role";

grant update on table "public"."events_users" to "service_role";

grant delete on table "public"."messages" to "anon";

grant insert on table "public"."messages" to "anon";

grant references on table "public"."messages" to "anon";

grant select on table "public"."messages" to "anon";

grant trigger on table "public"."messages" to "anon";

grant truncate on table "public"."messages" to "anon";

grant update on table "public"."messages" to "anon";

grant delete on table "public"."messages" to "authenticated";

grant insert on table "public"."messages" to "authenticated";

grant references on table "public"."messages" to "authenticated";

grant select on table "public"."messages" to "authenticated";

grant trigger on table "public"."messages" to "authenticated";

grant truncate on table "public"."messages" to "authenticated";

grant update on table "public"."messages" to "authenticated";

grant delete on table "public"."messages" to "service_role";

grant insert on table "public"."messages" to "service_role";

grant references on table "public"."messages" to "service_role";

grant select on table "public"."messages" to "service_role";

grant trigger on table "public"."messages" to "service_role";

grant truncate on table "public"."messages" to "service_role";

grant update on table "public"."messages" to "service_role";

grant delete on table "public"."news_posts" to "anon";

grant insert on table "public"."news_posts" to "anon";

grant references on table "public"."news_posts" to "anon";

grant select on table "public"."news_posts" to "anon";

grant trigger on table "public"."news_posts" to "anon";

grant truncate on table "public"."news_posts" to "anon";

grant update on table "public"."news_posts" to "anon";

grant delete on table "public"."news_posts" to "authenticated";

grant insert on table "public"."news_posts" to "authenticated";

grant references on table "public"."news_posts" to "authenticated";

grant select on table "public"."news_posts" to "authenticated";

grant trigger on table "public"."news_posts" to "authenticated";

grant truncate on table "public"."news_posts" to "authenticated";

grant update on table "public"."news_posts" to "authenticated";

grant delete on table "public"."news_posts" to "service_role";

grant insert on table "public"."news_posts" to "service_role";

grant references on table "public"."news_posts" to "service_role";

grant select on table "public"."news_posts" to "service_role";

grant trigger on table "public"."news_posts" to "service_role";

grant truncate on table "public"."news_posts" to "service_role";

grant update on table "public"."news_posts" to "service_role";

grant delete on table "public"."notifications" to "anon";

grant insert on table "public"."notifications" to "anon";

grant references on table "public"."notifications" to "anon";

grant select on table "public"."notifications" to "anon";

grant trigger on table "public"."notifications" to "anon";

grant truncate on table "public"."notifications" to "anon";

grant update on table "public"."notifications" to "anon";

grant delete on table "public"."notifications" to "authenticated";

grant insert on table "public"."notifications" to "authenticated";

grant references on table "public"."notifications" to "authenticated";

grant select on table "public"."notifications" to "authenticated";

grant trigger on table "public"."notifications" to "authenticated";

grant truncate on table "public"."notifications" to "authenticated";

grant update on table "public"."notifications" to "authenticated";

grant delete on table "public"."notifications" to "service_role";

grant insert on table "public"."notifications" to "service_role";

grant references on table "public"."notifications" to "service_role";

grant select on table "public"."notifications" to "service_role";

grant trigger on table "public"."notifications" to "service_role";

grant truncate on table "public"."notifications" to "service_role";

grant update on table "public"."notifications" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."user_tokens" to "anon";

grant insert on table "public"."user_tokens" to "anon";

grant references on table "public"."user_tokens" to "anon";

grant select on table "public"."user_tokens" to "anon";

grant trigger on table "public"."user_tokens" to "anon";

grant truncate on table "public"."user_tokens" to "anon";

grant update on table "public"."user_tokens" to "anon";

grant delete on table "public"."user_tokens" to "authenticated";

grant insert on table "public"."user_tokens" to "authenticated";

grant references on table "public"."user_tokens" to "authenticated";

grant select on table "public"."user_tokens" to "authenticated";

grant trigger on table "public"."user_tokens" to "authenticated";

grant truncate on table "public"."user_tokens" to "authenticated";

grant update on table "public"."user_tokens" to "authenticated";

grant delete on table "public"."user_tokens" to "service_role";

grant insert on table "public"."user_tokens" to "service_role";

grant references on table "public"."user_tokens" to "service_role";

grant select on table "public"."user_tokens" to "service_role";

grant trigger on table "public"."user_tokens" to "service_role";

grant truncate on table "public"."user_tokens" to "service_role";

grant update on table "public"."user_tokens" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."chat_sessions"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."chat_sessions"
as permissive
for select
to authenticated
using (true);


create policy "Enable select and update for users based on user1 or user2"
on "public"."chat_sessions"
as permissive
for all
to public
using (((user1 = auth.uid()) OR (user2 = auth.uid())))
with check (((user1 = auth.uid()) OR (user2 = auth.uid())));


create policy "Enable insert for authenticated users only"
on "public"."communities"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."communities"
as permissive
for select
to public
using (true);


create policy "Update Community"
on "public"."communities"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = community_owner));


create policy "Enable delete for users based on user_id"
on "public"."community_channel_membership"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."community_channel_membership"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."community_channel_membership"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on email"
on "public"."community_channel_membership"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."community_channel_messages"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."community_channel_messages"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."community_channels"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = community_owner));


create policy "Enable insert for authenticated users only"
on "public"."community_channels"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."community_channels"
as permissive
for select
to public
using (true);


create policy "update recent message"
on "public"."community_channels"
as permissive
for update
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."community_members"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable leave for users based on user_id"
on "public"."community_members"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."community_members"
as permissive
for select
to authenticated
using (true);


create policy "Kick User"
on "public"."community_members"
as permissive
for delete
to public
using (true);


create policy "member update"
on "public"."community_members"
as permissive
for update
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."community_requests"
as permissive
for delete
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."community_requests"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."community_requests"
as permissive
for select
to authenticated
using (true);


create policy "Enable delete for users based on user_id"
on "public"."connection_requests"
as permissive
for delete
to public
using (((auth.uid() = requester) OR (auth.uid() = requested)));


create policy "Enable insert for authenticated users only"
on "public"."connection_requests"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."connection_requests"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."events"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = event_host));


create policy "Enable insert for users based on user_id"
on "public"."events"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = event_host));


create policy "Enable read access for all users"
on "public"."events"
as permissive
for select
to public
using (true);


create policy "event update"
on "public"."events"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = event_host));


create policy "Enable delete for users based on user_id"
on "public"."events_users"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."events_users"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."events_users"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."messages"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."messages"
as permissive
for select
to authenticated
using (true);


create policy "Enable delete for users based on user_id"
on "public"."news_posts"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = author));


create policy "Enable insert for authenticated users only"
on "public"."news_posts"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."news_posts"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."notifications"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."notifications"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."notifications"
as permissive
for select
to public
using ((user_id = auth.uid()));


create policy "Enable update for users based on email"
on "public"."notifications"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."profiles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Public profiles are viewable by everyone."
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = id));


create policy "Enable insert for users based on user_id"
on "public"."user_tokens"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = id));



