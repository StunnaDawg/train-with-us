
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  insert into public.profiles (id, first_name, last_name, photos_url)
  values (new.id, new.raw_user_meta_data->>'first_name', new.raw_user_meta_data->>'last_name', ARRAY[new.raw_user_meta_data->>'photos_url']::text[]);
  return new;
end;$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."chat_sessions" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user1" "uuid" DEFAULT "gen_random_uuid"(),
    "user2" "uuid" DEFAULT "gen_random_uuid"(),
    "messages" "uuid"[]
);

ALTER TABLE "public"."chat_sessions" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."communities" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "community_title" "text",
    "community_style" "text",
    "community_owner" "uuid",
    "channels" "uuid"[],
    "community_photos" "text"[],
    "community_members" "uuid"[],
    "community_profile_pic" "text"
);

ALTER TABLE "public"."communities" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."community_channels" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "channel_type" "text" DEFAULT 'Text'::"text" NOT NULL,
    "channel_title" "text" DEFAULT 'General'::"text",
    "community" bigint NOT NULL,
    "community_owner" "uuid"
);

ALTER TABLE "public"."community_channels" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."community_members" (
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "joined_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "community_id" bigint NOT NULL
);

ALTER TABLE "public"."community_members" OWNER TO "postgres";

COMMENT ON TABLE "public"."community_members" IS 'community members, user id and community id';

CREATE TABLE IF NOT EXISTS "public"."community_requests" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "requested_community" bigint,
    "user_id" "uuid",
    "first_name" "text"
);

ALTER TABLE "public"."community_requests" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."events" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "date" timestamp without time zone,
    "event_title" "text",
    "event_description" "text",
    "price" numeric,
    "community_host" bigint,
    "event_host" "uuid" NOT NULL,
    "event_photos" "text"[],
    "event_cover_photo" "text"
);

ALTER TABLE "public"."events" OWNER TO "postgres";

ALTER TABLE "public"."events" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."events_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."events_users" (
    "user_id" "uuid" NOT NULL,
    "event_id" integer NOT NULL
);

ALTER TABLE "public"."events_users" OWNER TO "postgres";

ALTER TABLE "public"."communities" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."gyms_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."messages" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "sent_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "message" "text" DEFAULT ''::"text",
    "chat_session" "uuid" NOT NULL,
    "sender" "uuid",
    "read" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."messages" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "created_at" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    "username" "text",
    "first_name" "text",
    "last_name" "text",
    "gender" "text",
    "intentions" "text",
    "activities" "text"[],
    "birthday" timestamp without time zone,
    "photos_url" "text"[],
    "community_created" bigint,
    "onboard" boolean DEFAULT false NOT NULL,
    "connected_users" "uuid"[],
    "ignored_users" "uuid"[],
    "sexuality" "text",
    "community_preference" "text"[],
    "actvitiy_time" "text",
    CONSTRAINT "username_length" CHECK ((("char_length"("username") >= 3) AND ("char_length"("username") <= 12)))
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

ALTER TABLE ONLY "public"."chat_sessions"
    ADD CONSTRAINT "chat_sessions_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."community_channels"
    ADD CONSTRAINT "community_channels_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."community_members"
    ADD CONSTRAINT "community_members_pkey" PRIMARY KEY ("user_id", "community_id");

ALTER TABLE ONLY "public"."community_requests"
    ADD CONSTRAINT "community_requests_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."events"
    ADD CONSTRAINT "events_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."events_users"
    ADD CONSTRAINT "events_users_pkey" PRIMARY KEY ("user_id", "event_id");

ALTER TABLE ONLY "public"."communities"
    ADD CONSTRAINT "gyms_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_username_key" UNIQUE ("username");

ALTER TABLE ONLY "public"."chat_sessions"
    ADD CONSTRAINT "chat_sessions_user1_fkey" FOREIGN KEY ("user1") REFERENCES "public"."profiles"("id");

ALTER TABLE ONLY "public"."chat_sessions"
    ADD CONSTRAINT "chat_sessions_user2_fkey1" FOREIGN KEY ("user2") REFERENCES "public"."profiles"("id");

ALTER TABLE ONLY "public"."community_channels"
    ADD CONSTRAINT "community_channels_community_fkey" FOREIGN KEY ("community") REFERENCES "public"."communities"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."community_channels"
    ADD CONSTRAINT "community_channels_community_owner_fkey" FOREIGN KEY ("community_owner") REFERENCES "public"."profiles"("id");

ALTER TABLE ONLY "public"."community_requests"
    ADD CONSTRAINT "community_requests_requested_community_fkey" FOREIGN KEY ("requested_community") REFERENCES "public"."communities"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."community_requests"
    ADD CONSTRAINT "community_requests_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id");

ALTER TABLE ONLY "public"."events_users"
    ADD CONSTRAINT "events_users_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "public"."events"("id");

ALTER TABLE ONLY "public"."events_users"
    ADD CONSTRAINT "events_users_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id");

ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_chat session_fkey" FOREIGN KEY ("chat_session") REFERENCES "public"."chat_sessions"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_sender_fkey" FOREIGN KEY ("sender") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."communities"
    ADD CONSTRAINT "public_communities_community_owner_fkey" FOREIGN KEY ("community_owner") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."community_members"
    ADD CONSTRAINT "public_community_members_community_id_fkey" FOREIGN KEY ("community_id") REFERENCES "public"."communities"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."community_members"
    ADD CONSTRAINT "public_community_members_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."events"
    ADD CONSTRAINT "public_events_community_host_fkey" FOREIGN KEY ("community_host") REFERENCES "public"."communities"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."events"
    ADD CONSTRAINT "public_events_event_host_fkey" FOREIGN KEY ("event_host") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "public_profiles_community_created_fkey" FOREIGN KEY ("community_created") REFERENCES "public"."communities"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable delete for users based on user_id" ON "public"."community_requests" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."chat_sessions" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."communities" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."community_members" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."community_requests" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."events" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."messages" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for users based on user_id" ON "public"."community_channels" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "community_owner"));

CREATE POLICY "Enable read access for all users" ON "public"."chat_sessions" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."communities" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."community_channels" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."community_members" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."community_requests" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."events" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."messages" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Update Community" ON "public"."communities" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "community_owner"));

CREATE POLICY "Users can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "id"));

CREATE POLICY "Users can update own profile." ON "public"."profiles" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "id"));

ALTER TABLE "public"."chat_sessions" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."communities" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."community_channels" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."community_members" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."community_requests" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."events" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."events_users" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."messages" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."messages";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."chat_sessions" TO "anon";
GRANT ALL ON TABLE "public"."chat_sessions" TO "authenticated";
GRANT ALL ON TABLE "public"."chat_sessions" TO "service_role";

GRANT ALL ON TABLE "public"."communities" TO "anon";
GRANT ALL ON TABLE "public"."communities" TO "authenticated";
GRANT ALL ON TABLE "public"."communities" TO "service_role";

GRANT ALL ON TABLE "public"."community_channels" TO "anon";
GRANT ALL ON TABLE "public"."community_channels" TO "authenticated";
GRANT ALL ON TABLE "public"."community_channels" TO "service_role";

GRANT ALL ON TABLE "public"."community_members" TO "anon";
GRANT ALL ON TABLE "public"."community_members" TO "authenticated";
GRANT ALL ON TABLE "public"."community_members" TO "service_role";

GRANT ALL ON TABLE "public"."community_requests" TO "anon";
GRANT ALL ON TABLE "public"."community_requests" TO "authenticated";
GRANT ALL ON TABLE "public"."community_requests" TO "service_role";

GRANT ALL ON TABLE "public"."events" TO "anon";
GRANT ALL ON TABLE "public"."events" TO "authenticated";
GRANT ALL ON TABLE "public"."events" TO "service_role";

GRANT ALL ON SEQUENCE "public"."events_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."events_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."events_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."events_users" TO "anon";
GRANT ALL ON TABLE "public"."events_users" TO "authenticated";
GRANT ALL ON TABLE "public"."events_users" TO "service_role";

GRANT ALL ON SEQUENCE "public"."gyms_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."gyms_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."gyms_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."messages" TO "anon";
GRANT ALL ON TABLE "public"."messages" TO "authenticated";
GRANT ALL ON TABLE "public"."messages" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
